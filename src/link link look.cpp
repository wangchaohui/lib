#include <stdio.h>
#include <memory.h>
#include <algorithm>
using namespace std;

int d[110][110];
int GC[10010];
int x[10010][2],y[10010][2];

int main()
{
	int T,C=0,n,i,j,ans,f,k,can;
	int a,b;
	scanf("%d",&T);
	while(++C<=T)
	{
		scanf("%d",&n);
		memset(GC,0,sizeof(GC));
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
			{
				scanf("%d",&d[i][j]);
				if(d[i][j]==0)continue;
				x[d[i][j]][GC[d[i][j]]]=i;
				y[d[i][j]][GC[d[i][j]]]=j;
				GC[d[i][j]]++;
			}
		ans=0;f=1;
		while(f)
		{
			f=0;
			for(i=1;i<=10000;i++)
				if(GC[i]==2)
				{
					a=min(y[i][0],y[i][1]);
					b=max(y[i][0],y[i][1]);
					if(a<b)
					{
						can=1;
						if(x[i][0]<x[i][1])
						{
							for(j=x[i][0];j<x[i][1];j++)if(d[j][y[i][1]]){can=0;break;}
						}
						if(x[i][1]<x[i][0])
						{
							for(j=x[i][1];j<x[i][0];j++)if(d[j][y[i][0]]){can=0;break;}
						}
						if(can)
						{
							for(j=min(x[i][0],x[i][1])-1;j>=0;j--)
							{
								if(d[j][y[i][0]] || d[j][y[i][1]])break;
								for(k=a+1;k<b;k++)if(d[j][k])break;
								if(k==b)
								{
									ans++;
									GC[i]=0;
									d[x[i][0]][y[i][0]]=0;
									d[x[i][1]][y[i][1]]=0;
									f=1;
									break;
								}
							}
							if(GC[i]==0)continue;
						}
					}
					if(x[i][0]>x[i][1])swap(x[i][0],x[i][1]),swap(y[i][0],y[i][1]);
					for(j=x[i][0];j<=x[i][1];j++)
					{
						for(k=x[i][0]+1;k<=j;k++)if(d[k][y[i][0]])break;
						if(k<=j)continue;
						for(k=j;k<x[i][1];k++)if(d[k][y[i][1]])break;
						if(k<x[i][1])continue;
						for(k=a+1;k<b;k++)if(d[j][k])break;
						if(k>=b)
						{
							ans++;
							GC[i]=0;
							d[x[i][0]][y[i][0]]=0;
							d[x[i][1]][y[i][1]]=0;
							f=1;
							break;
						}
					}
					if(GC[i]==0)continue;
					if(a<b)
					{
						can=1;
						if(x[i][0]>x[i][1])
						{
							for(j=x[i][0];j>x[i][1];j--)if(d[j][y[i][1]]){can=0;break;}
						}
						if(x[i][1]>x[i][0])
						{
							for(j=x[i][1];j>x[i][0];j--)if(d[j][y[i][0]]){can=0;break;}
						}
						if(can)
						{
							for(j=max(x[i][0],x[i][1])+1;j<n;j++)
							{
								if(d[j][y[i][0]] || d[j][y[i][1]])break;
								for(k=a+1;k<b;k++)if(d[j][k])break;
								if(k==b)
								{
									ans++;
									GC[i]=0;
									d[x[i][0]][y[i][0]]=0;
									d[x[i][1]][y[i][1]]=0;
									f=1;
									break;
								}
							}
							if(GC[i]==0)continue;
						}
					}
					a=min(x[i][0],x[i][1]);
					b=max(x[i][0],x[i][1]);
					if(a<b)
					{
						can=1;
						if(y[i][0]<y[i][1])
						{
							for(j=y[i][0];j<y[i][1];j++)if(d[x[i][1]][j]){can=0;break;}
						}
						if(y[i][1]<y[i][0])
						{
							for(j=y[i][1];j<y[i][0];j++)if(d[x[i][0]][j]){can=0;break;}
						}
						if(can)
						{
							for(j=min(y[i][0],y[i][1])-1;j>=0;j--)
							{
								if(d[x[i][0]][j] || d[x[i][1]][j])break;
								for(k=a+1;k<b;k++)if(d[k][j])break;
								if(k==b)
								{
									ans++;
									GC[i]=0;
									d[x[i][0]][y[i][0]]=0;
									d[x[i][1]][y[i][1]]=0;
									f=1;
									break;
								}
							}
							if(GC[i]==0)continue;
						}
					}
					if(y[i][0]>y[i][1])swap(y[i][0],y[i][1]),swap(x[i][0],x[i][1]);
					for(j=y[i][0];j<=y[i][1];j++)
					{
						for(k=y[i][0]+1;k<=j;k++)if(d[x[i][0]][k])break;
						if(k<=j)continue;
						for(k=j;k<y[i][1];k++)if(d[x[i][1]][k])break;
						if(k<y[i][1])continue;
						for(k=a+1;k<b;k++)if(d[k][j])break;
						if(k>=b)
						{
							ans++;
							GC[i]=0;
							d[x[i][0]][y[i][0]]=0;
							d[x[i][1]][y[i][1]]=0;
							f=1;
							break;
						}
					}
					if(GC[i]==0)continue;
					if(a<b)
					{
						can=1;
						if(y[i][0]>y[i][1])
						{
							for(j=y[i][0];j>y[i][1];j--)if(d[x[i][1]][j]){can=0;break;}
						}
						if(y[i][1]>y[i][0])
						{
							for(j=y[i][1];j>y[i][0];j--)if(d[x[i][0]][j]){can=0;break;}
						}
						if(can)
						{
							for(j=max(y[i][0],y[i][1])+1;j<n;j++)
							{
								if(d[x[i][0]][j] || d[x[i][1]][j])break;
								for(k=a+1;k<b;k++)if(d[k][j])break;
								if(k==b)
								{
									ans++;
									GC[i]=0;
									d[x[i][0]][y[i][0]]=0;
									d[x[i][1]][y[i][1]]=0;
									f=1;
									break;
								}
							}
							if(GC[i]==0)continue;
						}
					}
				}
		}
		printf("Case %d: %d\n",C,ans);
	}
	return 0;
}
